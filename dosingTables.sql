CREATE TABLE PRESCRIBER (
    PRESCRIBER_ID NUMBER(8) PRIMARY KEY,
    FIRST_NAME VARCHAR(40) NOT NULL,
    LAST_NAME VARCHAR(40) NOT NULL,
    PROFESSION VARCHAR(40) NOT NULL,
    AGE NUMBER(3) NOT NULL,
    SEX VARCHAR(1) NOT NULL
);
CREATE TABLE PATIENT (
    PATIENT_ID NUMBER(8) PRIMARY KEY,
    FIRST_NAME VARCHAR(40) NOT NULL,
    LAST_NAME VARCHAR(40) NOT NULL,
    AGE NUMBER(3) NOT NULL CHECK (AGE >= 1 AND AGE <= 150),
    HEIGHT NUMBER(3) NOT NULL CHECK (HEIGHT >= 1),
    WEIGHT NUMBER(3) NOT NULL CHECK (WEIGHT >= 1),
    SEX VARCHAR(1) NOT NULL,
    PRESCRIBER_ID NUMBER(8) NOT NULL,
    CONSTRAINT paIC1 FOREIGN KEY (PRESCRIBER_ID)
                 REFERENCES PRESCRIBER(PRESCRIBER_ID)
                 ON DELETE CASCADE
                 DEFERRABLE INITIALLY DEFERRED
);
CREATE TABLE ENZYME (
    ENZYME_ID NUMBER(8) PRIMARY KEY,
    ENZYME_NAME VARCHAR(40) NOT NULL
);
CREATE TABLE PATIENT_ENZYME (
    PATIENT_ID NUMBER(8) NOT NULL,
    ENZYME_ID NUMBER(8) NOT NULL,
    PHENOTYPE VARCHAR(10) NOT NULL,
    PRIMARY KEY (PATIENT_ID, ENZYME_ID),
    CONSTRAINT peIC1 FOREIGN KEY (PATIENT_ID)
                 REFERENCES PATIENT(PATIENT_ID)
                 ON DELETE CASCADE
                 DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT peIC2 FOREIGN KEY (ENZYME_ID)
                 REFERENCES ENZYME(ENZYME_ID)
                 ON DELETE CASCADE
                 DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT peIC3 CHECK (PHENOTYPE IN ('NONE','POOR','EXTENSIVE','ULTRARAPID'))
);
CREATE TABLE MEDICINE (
    MEDICINE_ID NUMBER(8) PRIMARY KEY,
    MEDICINE_NAME VARCHAR(40) NOT NULL
);
CREATE TABLE MEDICINE_GENERIC_NAME (
    MEDICINE_ID NUMBER(8) NOT NULL,
    GENERIC_NAME_VARIATIONS VARCHAR(40) NOT NULL,
    PRIMARY KEY (MEDICINE_ID, GENERIC_NAME_VARIATIONS),
    CONSTRAINT mnIC1 FOREIGN KEY (MEDICINE_ID)
                 REFERENCES MEDICINE(MEDICINE_ID)
                 ON DELETE CASCADE
                 DEFERRABLE INITIALLY DEFERRED
);
CREATE TABLE INTRAVENOUS (
    MEDICINE_ID NUMBER(8) PRIMARY KEY,
    DRIP_RATE NUMBER(8,3) NOT NULL CHECK (DRIP_RATE > 0),
    CONSTRAINT iIC1 FOREIGN KEY (MEDICINE_ID)
                    REFERENCES MEDICINE(MEDICINE_ID)
                    ON DELETE CASCADE
                    DEFERRABLE INITIALLY DEFERRED
);
CREATE TABLE PILL_FORM (
    MEDICINE_ID NUMBER(8) PRIMARY KEY,
    RELEASE_DURATION NUMBER(8,3) NOT NULL CHECK (RELEASE_DURATION > 0),
    BIOAVAILABILITY NUMBER(4,3) NOT NULL CHECK (BIOAVAILABILITY > 0 AND BIOAVAILABILITY < 1),
    CONSTRAINT iIC2 FOREIGN KEY (MEDICINE_ID)
                    REFERENCES MEDICINE(MEDICINE_ID)
                    ON DELETE CASCADE
                    DEFERRABLE INITIALLY DEFERRED
);
CREATE TABLE METABOLISM (
    ENZYME_ID NUMBER(8) NOT NULL,
    MEDICINE_ID NUMBER(8) NOT NULL,
    PHENOTYPE VARCHAR(10) NOT NULL,
    METABOLIC_RATE NUMBER(8,3) NOT NULL CHECK (METABOLIC_RATE >= 0),
    PRIMARY KEY (MEDICINE_ID, ENZYME_ID, PHENOTYPE),
    CONSTRAINT mIC1 FOREIGN KEY (MEDICINE_ID)
                    REFERENCES MEDICINE(MEDICINE_ID)
                    ON DELETE CASCADE
                    DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT mIC2 FOREIGN KEY (ENZYME_ID)
                    REFERENCES ENZYME(ENZYME_ID)
                    ON DELETE CASCADE
                    DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT mIC3 CHECK (PHENOTYPE IN ('NONE','POOR','EXTENSIVE','ULTRARAPID')),
    CONSTRAINT mIC4 CHECK (NOT(PHENOTYPE = 'NONE' AND METABOLIC_RATE <> 0)),
    CONSTRAINT mIC5 CHECK (NOT(PHENOTYPE = 'POOR' AND (METABOLIC_RATE = 0 OR METABOLIC_RATE > 0.15)) ),
    CONSTRAINT mIC6 CHECK (NOT(PHENOTYPE = 'EXTENSIVE' AND (METABOLIC_RATE <= 0.15 OR METABOLIC_RATE > 0.25)) ),
    CONSTRAINT mIC7 CHECK (NOT(PHENOTYPE = 'ULTRARAPID' AND (METABOLIC_RATE <= 0.25 OR METABOLIC_RATE > 0.35)) )
);
CREATE TABLE PRESCRIPTION (
    DATE_GIVEN DATE NOT NULL,
    PATIENT_ID NUMBER(8) NOT NULL,
    PRESCRIBER_ID NUMBER(8) NOT NULL,
    MEDICINE_ID NUMBER(8) NOT NULL,
    DOSAGE NUMBER(8,3) NOT NULL CHECK (DOSAGE >= 0),
    PRIMARY KEY (PATIENT_ID, PRESCRIBER_ID, MEDICINE_ID, DATE_GIVEN),
    CONSTRAINT prIC1 FOREIGN KEY (PATIENT_ID)
                    REFERENCES PATIENT(PATIENT_ID)
                    ON DELETE CASCADE
                    DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT prIC2 FOREIGN KEY (PRESCRIBER_ID)
                    REFERENCES PRESCRIBER(PRESCRIBER_ID)
                    ON DELETE CASCADE
                    DEFERRABLE INITIALLY DEFERRED,
    CONSTRAINT prIC3 FOREIGN KEY (MEDICINE_ID)
                    REFERENCES MEDICINE(MEDICINE_ID)
                    ON DELETE CASCADE
                    DEFERRABLE INITIALLY DEFERRED
);
--
CREATE OR REPLACE TRIGGER mIC8_TA
BEFORE INSERT OR UPDATE OF ENZYME_ID,MEDICINE_ID,PHENOTYPE ON METABOLISM
FOR EACH ROW 
DECLARE
 numFound INTEGER;
BEGIN
 SELECT COUNT(DISTINCT ENZYME_ID)
 INTO numFound
 FROM METABOLISM
 WHERE MEDICINE_ID = :NEW.MEDICINE_ID;
--
 IF numFound > 1
 THEN
   RAISE_APPLICATION_ERROR(-20001, '+++++ INSERT or UPDATE rejected. Medicine id '||:NEW.MEDICINE_ID||' cannot interact with multiple enzymes');
 END IF;
END;
/
CREATE OR REPLACE TRIGGER prC4_TA
BEFORE INSERT OR UPDATE OF PATIENT_ID,MEDICINE_ID,DOSAGE ON PRESCRIPTION
FOR EACH ROW 
DECLARE
 PRAGMA AUTONOMOUS_TRANSACTION; -- You? need this directive
 patientWeight NUMBER(3);
 metabolicRate NUMBER(8,3);
 prescriptionDosage NUMBER(8,3);
 bioavail NUMBER(4,3);
 lowerDosage NUMBER(8,3);
 upperDosage NUMBER(8,3);
BEGIN
 SELECT M.METABOLIC_RATE
 INTO metabolicRate
 FROM METABOLISM M
     ,PATIENT_ENZYME E
 WHERE E.PATIENT_ID = :NEW.PATIENT_ID
   AND M.MEDICINE_ID = :NEW.MEDICINE_ID
   AND M.ENZYME_ID = E.ENZYME_ID
   AND M.PHENOTYPE = E.PHENOTYPE;
--
 SELECT WEIGHT
 INTO patientWeight
 FROM PATIENT
 WHERE PATIENT_ID = :NEW.PATIENT_ID;
--
 SELECT BIOAVAILABILITY
 INTO bioavail
 FROM PILL_FORM
 WHERE MEDICINE_ID = :NEW.MEDICINE_ID;
--
 SELECT 0.012750 * patientWeight * metabolicRate * 2.8 * 6 / bioavail
      , 0.038265 * patientWeight * metabolicRate * 2.8 * 6 / bioavail
 INTO lowerDosage
    , upperDosage
 FROM DUAL;
--
 IF (:NEW.DOSAGE is NULL)
 THEN
   :NEW.DOSAGE := lowerDosage;
 END IF;
 IF (:NEW.DOSAGE < lowerDosage) OR (:NEW.DOSAGE > upperDosage)
 THEN
   RAISE_APPLICATION_ERROR(-20001, '+++++ INSERT or UPDATE rejected. Dosage '||:NEW.DOSAGE||' is outside range for patient. Must be between '||lowerDosage||' & '||upperDosage); 
 END IF; 
END;
/